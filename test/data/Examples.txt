// Example 1: Basic Transforms
g.V('name', 'marko').out();
// g.V({name: 'marko'}).out();
// g.v(1, 4).out('knows', 'created').in();
// g.v([1, 4]).out(['knows', 'created']).in();

// Example 2: [i]
g.V().index(0).property('name');

// Example 3: [i..j]
g.V().range(0,1).property('name');

// Example 4: has
g.E().has('id', T.eq, '9')
// has with comparison to float. Must use g.java.newFloat().
// Doesn't seem to be possible to automatically cast from javascript double precision
// to java float precision.
g.E().has('weight', T.gt, g.java.newFloat(0.5))
g.E().has('weight', T.lt, g.java.newFloat(0.5))
g.E().has('weight', T.eq, g.java.newFloat(0.5))
g.E().has('weight', T.neq, g.java.newFloat(0.5))
g.E().has('weight', T.gte, g.java.newFloat(0.5))
g.E().has('weight', T.lte, g.java.newFloat(0.5))

// g.E().has('weight', T.gt, '0.5f').outV().transform('{[it.id,it.age]}');

// Example 5: and & or
g.V().and(g._().both('knows'), g._().both('created')); // in mine, not in inolen's
// g.v(1).outE().or(g._().has('id', T.eq, '9'), g._().has('weight', T.lt, '0.6f'));   //



// g.V().out().groupBy('{it.name}{it.in}{it.unique().findAll{i -> i.age > 30}.name}').cap();
// g.V().retain([g.v(1), g.v(2), g.v(3)]);

var map = new g.HashMap();
//g.V().groupBy(map, '{it}{it.out}').iterate();

var x = new g.ArrayList()
g.V('id', '1').out().aggregate(x).out().retain(x)

