// See https://github.com/inolen/gremlin-node/blob/master/README.md#examples

// Note: we use  in several places below simply to guarantee determinstic 
// results, which is necessary for this to be a stable unit test.
// Unfortunately it adds complexity to the examples. In all cases, the .order() step can be ignored
// without invalidating the example.

// Example 1: Basic Transforms
g.V('name', 'marko').out()
// g.V({name: 'marko'}).out();
// g.v(1, 4).out('knows', 'created').in();
// g.v([1, 4]).out(['knows', 'created']).in();

// Example 2: [i]
g.V().order('{it -> it.a.id <=> it.b.id}').index(0).property('name');

// Example 3: [i..j]
g.V().order('{it -> it.a.id <=> it.b.id}').range(0,1)    // Note, 0 and 1 are not the id's '0' and '1'.
g.V().order('{it -> it.a.id <=> it.b.id}').range(0,1).property('name');

// Example 4: has
g.E().has('id', T.eq, '9')
// has with comparison to float. Must use g.java.newFloat().
// Doesn't seem to be possible to automatically cast from javascript double precision
// to java float precision.
g.E().has('weight', T.gt, g.java.newFloat(0.5))
g.E().has('weight', T.lt, g.java.newFloat(0.5))
g.E().has('weight', T.eq, g.java.newFloat(0.5))
g.E().has('weight', T.neq, g.java.newFloat(0.5))
g.E().has('weight', T.gte, g.java.newFloat(0.5))
g.E().has('weight', T.lte, g.java.newFloat(0.5))

g.E().has('weight', T.gt, g.java.newFloat(0.5)).outV().transform('{it -> [it.id, it.age]}')

// Example 5: and & or
g.V().and(g._().both('knows'), g._().both('created'))
g.V('id', '1').outE().or(g._().has('id', T.eq, '9'), g._().has('weight', T.gt, g.java.newFloat(0.6)))

// g.V().out().groupBy('{it.name}{it.in}{it.unique().findAll{i -> i.age > 30}.name}').cap();
// g.V().retain([g.v(1), g.v(2), g.v(3)]);

var m = new g.HashMap();
g.V().order('{it -> it.a.id <=> it.b.id}').groupBy(m, '{it -> it}', '{it -> it.out}').iterate()
// m

var x = new g.ArrayList()
g.V('id', '1').out().order('{it -> it.a.id <=> it.b.id}').aggregate(x).out().retain(x)
x


