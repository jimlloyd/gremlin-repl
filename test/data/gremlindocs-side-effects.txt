// gremlindocs-side-effects
// See http://gremlindocs.com/#side-effect

// ### http://gremlindocs.com/#side-effect/aggregate
// Emits input, but adds input in collection, where provided closure processes input prior to
// insertion (greedy). In being "greedy", 'aggregate' will exhaust all the items that come to
// it from previous steps before emitting the next element.
x = new ArrayList
g.V('id', '1').out().aggregate(x).out().except(x)
x

// ### http://gremlindocs.com/#side-effect/as
// Emits input, but names the previous step.
g.V().as('x').outE('knows').inV().has('age', T.gt, 30).back('x').property('age')

// ### http://gremlindocs.com/#side-effect/groupby
// Emits input, but groups input after processing it by provided key-closure and value-closure.
// It is also possible to supply an optional reduce-closure.
g.V().groupBy('{it -> it}', '{it -> it.out}').cap()
g.V().groupBy('{it -> it}', '{it -> it.out}', '{it->it.size()}').cap()
m = new HashMap
g.V().groupBy(m, '{it -> it}', '{it -> it.out}')
m

// ### http://gremlindocs.com/#side-effect/groupcount
// Emits input, but updates a map for each input, where closures provides generic map update.
m = new HashMap
g.V().out().groupCount(m)
m
m = new HashMap
g.V('id', '1').out().groupCount(m, '{it->it}', '{it->it.b+1.0}').out().groupCount(m, '{it->it}', '{it->it.b+0.5}')
m

// ### http://gremlindocs.com/#side-effect/optional
// Behaves similar to back except that it does not filter. It will go down a particular path and back
// up to where it left off. As such, its useful for yielding a side-effect down a particular branch.
g.V().as('x').outE('knows').inV().has('age', T.gt, 30).back('x')
g.V().as('x').outE('knows').inV().has('age', T.gt, 30).optional('x')

// ### http://gremlindocs.com/#side-effect/sideeffect
// Emits input, but calls a side effect closure on each input.
// To create a sideEffect that modifies local state, we must create a dynamic proxy using
// node-java's newProxy factory.  The full Java generics type specification is
// `PipeFunction<Vertex, Object>`, but newProxy only needs the non-generic type.
// count = 0
// var mySideEffect = g.java.newProxy('com.tinkerpop.pipes.PipeFunction', {
//     compute: function(/* vertex */) {
//         count += 1;
//         return null;
//     }
// });
// TODO: It's not currently possible to execute a side effect like this inside Mocha.
// Trying to do so prevents Mocha from exiting after all tests complete.
// g.V().sideEffect(mySideEffect).iterate(function() {})

// ### http://gremlindocs.com/#side-effect/store
// Emits input, but adds input to collection, where provided closure processes input prior to
// insertion (lazy). In being "lazy", 'store' will keep element as they are being requested.
x = new ArrayList
g.V('id', '1').out().store(x).map()
x
x = new ArrayList
g.V('id', '1').out().store(x).next(function (err, val) { })
// We'd like to immediately check the value of x here, but there is a race condition since
// the above statement uses an async callback. As a hack, we execute something else first
// and then check the value of x. This is not absolutely guaranteed to work, but should with very probability.
g.V().out().out().out().id()
// Ok, now check value of x
x

// ### http://gremlindocs.com/#side-effect/table
// Emits input, but stores row of as values (constrained by column names if provided) in a table.
// Accepts an optional set of closures that are applied in round-robin fashion to each column of the table.
t = new g.Table
g.V().as('x').property('name').as('name').back('x').property('age').as('age').table(t)
t
t = new g.Table
g.V().has('age').as('x').property('name').as('name').back('x').property('age').as('age').table(t, '{it->it}', '{it->it}', '{it->it>30 ? "over thirty" : "under thirty"}')
t

// ### http://gremlindocs.com/#side-effect/tree
// Emit input, but stores the tree formed by the traversal as a map. Accepts an optional set of closures
// to be applied in round-robin fashion over each level of the tree.
g.V('id', '1').out().out().tree().cap()
