node > // gremlindocs-transform
node > // See http://gremlindocs.com/#transform
node > 
node > // ### http://gremlindocs.com/#transform/_
node > // Identity turns an arbitrary object into a "pipeline".
node > // In gremlin-node the _() does not work as in groovy,
node > // and in fact doesn't seem to be useful it any way.
node > // It cannot start a pipeline from a non-pipeline object,
node > // and when chained onto the end of a pipeline seems
node > // to just do an identity (no-op) operation:
node > g
[
  'tinkergraph[vertices:6 edges:6]'
]
node > g._()
[
  'tinkergraph[vertices:6 edges:6]'
]
node > g.V().id()
[
  '1',
  '2',
  '3',
  '4',
  '5',
  '6'
]
node > g.V().id()._()
[
  '1',
  '2',
  '3',
  '4',
  '5',
  '6'
]
node > 
node > // But it is possible with node gremlin to make a pipeline
node > // from an array, using the start() pipeline step, as follows:
node > var x = [17, 23, 42]
node > var a = new ArrayList()
node > x.map(function(e) { a.addSync(e); })
[
  null,
  null,
  null
]
node > a
'[17, 23, 42]'
node > g.start(a.iteratorSync())
[
  17,
  23,
  42
]
node > g.start(a.iteratorSync()).transform('{it -> it+1}')
[
  18,
  24,
  43
]
node > 
node > // ### http://gremlindocs.com/#transform/both
node > // Get both adjacent vertices of the vertex, the in and the out.
node > g.V('id', '4').both()
[
  {
    _id: '1',
    _type: 'vertex',
    age: 29,
    name: 'marko'
  },
  {
    _id: '3',
    _type: 'vertex',
    lang: 'java',
    name: 'lop'
  },
  {
    _id: '5',
    _type: 'vertex',
    lang: 'java',
    name: 'ripple'
  }
]
node > g.V('id', '4').both().id()
[
  '1',
  '3',
  '5'
]
node > g.V('id', '4').both('knows').id()
[
  '1'
]
node > g.V('id', '4').both('knows', 'created').id()
[
  '1',
  '3',
  '5'
]
node > g.V('id', '4').both(1, 'knows', 'created').id()
[
  '1'
]
node > 
node > // ### http://gremlindocs.com/#transform/bothE
node > // Get both incoming and outgoing edges of the vertex.
node > g.V('id', '4').bothE()
[
  {
    _id: '10',
    _inV: '5',
    _label: 'created',
    _outV: '4',
    _type: 'edge',
    weight: 1
  },
  {
    _id: '11',
    _inV: '3',
    _label: 'created',
    _outV: '4',
    _type: 'edge',
    weight: 0.4
  },
  {
    _id: '8',
    _inV: '4',
    _label: 'knows',
    _outV: '1',
    _type: 'edge',
    weight: 1
  }
]
node > g.V('id', '4').bothE().id()
[
  '10',
  '11',
  '8'
]
node > g.V('id', '4').bothE('knows').id()
[
  '8'
]
node > g.V('id', '4').bothE('knows', 'created').id()
[
  '10',
  '11',
  '8'
]
node > g.V('id', '4').bothE(1, 'knows', 'created').id()
[
  '8'
]
node > 
node > // ### http://gremlindocs.com/#transform/bothV
node > // Get both incoming and outgoing vertices of the edge.
node > g.E('id', '12')
[
  {
    _id: '12',
    _inV: '3',
    _label: 'created',
    _outV: '6',
    _type: 'edge',
    weight: 0.2
  }
]
node > g.E('id', '12').outV()
[
  {
    _id: '6',
    _type: 'vertex',
    age: 35,
    name: 'peter'
  }
]
node > g.E('id', '12').inV()
[
  {
    _id: '3',
    _type: 'vertex',
    lang: 'java',
    name: 'lop'
  }
]
node > g.E('id', '12').bothV()
[
  {
    _id: '3',
    _type: 'vertex',
    lang: 'java',
    name: 'lop'
  },
  {
    _id: '6',
    _type: 'vertex',
    age: 35,
    name: 'peter'
  }
]
node > 
node > // ### http://gremlindocs.com/#transform/cap
node > // Gets the side-effect of the pipe prior. In other words, it emits the value of the previous
node > // step and not the values that flow through it.
node > g.V('lang', 'java').in('created').property('name').groupCount()
[
  'josh',
  'josh',
  'marko',
  'peter'
]
node > g.V('lang', 'java').in('created').property('name').groupCount().cap()
[
  {
    josh: 2,
    marko: 1,
    peter: 1
  }
]
node > 
node > // ### http://gremlindocs.com/#transform/e
node > // The edge iterator for the graph. Utilize this to iterate through all the edges in the graph.
node > // Use with care on large graphs.
node > g.E()
[
  {
    _id: '10',
    _inV: '5',
    _label: 'created',
    _outV: '4',
    _type: 'edge',
    weight: 1
  },
  {
    _id: '11',
    _inV: '3',
    _label: 'created',
    _outV: '4',
    _type: 'edge',
    weight: 0.4
  },
  {
    _id: '12',
    _inV: '3',
    _label: 'created',
    _outV: '6',
    _type: 'edge',
    weight: 0.2
  },
  {
    _id: '7',
    _inV: '2',
    _label: 'knows',
    _outV: '1',
    _type: 'edge',
    weight: 0.5
  },
  {
    _id: '8',
    _inV: '4',
    _label: 'knows',
    _outV: '1',
    _type: 'edge',
    weight: 1
  },
  {
    _id: '9',
    _inV: '3',
    _label: 'created',
    _outV: '1',
    _type: 'edge',
    weight: 0.4
  }
]
node > g.E().property('weight')
[
  0.2,
  0.4,
  0.4,
  0.5,
  1,
  1
]
node > 
node > // ### http://gremlindocs.com/#transform/gather
node > // Collect all objects up to that step and process the gathered list with the provided closure.
node > g.V('id', '1').out()
[
  {
    _id: '2',
    _type: 'vertex',
    age: 27,
    name: 'vadas'
  },
  {
    _id: '3',
    _type: 'vertex',
    lang: 'java',
    name: 'lop'
  },
  {
    _id: '4',
    _type: 'vertex',
    age: 32,
    name: 'josh'
  }
]
node > g.V('id', '1').out().gather()
[
  [
    {
      _id: '2',
      _type: 'vertex',
      age: 27,
      name: 'vadas'
    },
    {
      _id: '3',
      _type: 'vertex',
      lang: 'java',
      name: 'lop'
    },
    {
      _id: '4',
      _type: 'vertex',
      age: 32,
      name: 'josh'
    }
  ]
]
node > g.V('id', '1').out().gather('{it -> it.size()}')
[
  3
]
node > 
node > // ### http://gremlindocs.com/#transform/id
node > // Gets the unique identifier of the element.
node > g.V('name', 'marko')
[
  {
    _id: '1',
    _type: 'vertex',
    age: 29,
    name: 'marko'
  }
]
node > g.V('name', 'marko').id()
[
  '1'
]
node > 
node > // ### http://gremlindocs.com/#transform/in
node > // Gets the adjacent vertices to the vertex.
node > g.V('id', '4').id()
[
  '4'
]
node > g.V('id', '4').inE().outV().id()
[
  '1'
]
node > g.V('id', '4').in().id()
[
  '1'
]
node > g.V('id', '3').id()
[
  '3'
]
node > g.V('id', '3').in('created').id()
[
  '1',
  '4',
  '6'
]
node > //g.V('id', '3').in(2, 'created').id()
node > g.V('id', '3').inE('created').outV().id()
[
  '1',
  '4',
  '6'
]
node > //g.V('id', '3').inE(2, 'created').outV().index(0).id()
node > 
node > // ### http://gremlindocs.com/#transform/ine
node > // Gets the incoming edges of the vertex.
node > g.V('id', '4').id()
[
  '4'
]
node > g.V('id', '4').inE().outV().id()
[
  '1'
]
node > g.V('id', '4').in().id()
[
  '1'
]
node > g.V('id', '3').id()
[
  '3'
]
node > g.V('id', '3').in('created').id()
[
  '1',
  '4',
  '6'
]
node > //g.V('id', '3').in(2, 'created').id()
node > g.V('id', '3').inE('created').outV().id()
[
  '1',
  '4',
  '6'
]
node > //g.V('id', '3').inE(2, 'created').outV().index(0).id()
node > 
node > // ### http://gremlindocs.com/#transform/inv
node > // Get both incoming head vertex of the edge.
node > g.E('id', '12')
[
  {
    _id: '12',
    _inV: '3',
    _label: 'created',
    _outV: '6',
    _type: 'edge',
    weight: 0.2
  }
]
node > g.E('id', '12').inV().id()
[
  '3'
]
node > g.E('id', '12').bothV().id()
[
  '3',
  '6'
]
node > 
node > // ### http://gremlindocs.com/#transform/key
node > // Get the property value of an element.
node > // This javascript implementation does not support the Groovy methods.
node > // Only property(key) is supported. Note: use .property(), not .getProperty().
node > g.V('id', '3').property('name')
[
  'lop'
]
node > 
node > // ### http://gremlindocs.com/#transform/label
node > // Gets the label of an edge.
node > g.V('id', '6').outE().label()
[
  'created'
]
node > g.V('id', '1').outE().filter('{it -> it.label == "created"}')
[
  {
    _id: '9',
    _inV: '3',
    _label: 'created',
    _outV: '1',
    _type: 'edge',
    weight: 0.4
  }
]
node > g.V('id', '1').outE().has('label', 'created')
[
  {
    _id: '9',
    _inV: '3',
    _label: 'created',
    _outV: '1',
    _type: 'edge',
    weight: 0.4
  }
]
node > 
node > // ### http://gremlindocs.com/#transform/linkboth-in-out
node > // NOT WORKING
node > 
node > // ### http://gremlindocs.com/#transform/map
node > // Gets the property map of the graph element.
node > g.V('id', '1').map()
[
  {
    age: 29,
    name: 'marko'
  }
]
node > g.V().map()
[
  {
    age: 27,
    name: 'vadas'
  },
  {
    age: 29,
    name: 'marko'
  },
  {
    age: 32,
    name: 'josh'
  },
  {
    age: 35,
    name: 'peter'
  },
  {
    lang: 'java',
    name: 'lop'
  },
  {
    lang: 'java',
    name: 'ripple'
  }
]
node > g.V().map('id', 'age')
[
  {
    age: 27,
    id: '2'
  },
  {
    age: 29,
    id: '1'
  },
  {
    age: 32,
    id: '4'
  },
  {
    age: 35,
    id: '6'
  },
  {
    id: '3'
  },
  {
    id: '5'
  }
]
node > 
node > // ### http://gremlindocs.com/#transform/memoize
node > // Remembers a particular mapping from input to output. Long or expensive expressions with no
node > // side effects can use this step to remember a mapping, which helps reduce load when previously
node > // processed objects are passed into it.
node > // For situations where memoization may consume large amounts of RAM, consider using an embedded
node > // key-value store like JDBM or some other persistent Map implementation.
node > g.V().out().out().order('{it -> it.a.id <=> it.b.id}').memoize(1).property('name').order()
[
  'lop',
  'ripple'
]
node > g.V().out().as('here').out().order('{it -> it.a.id <=> it.b.id}').memoize('here').property('name').order()
[
  'lop',
  'ripple'
]
node > m = new HashMap()
'{}'
node > g.V().out().out().order('{it -> it.a.id <=> it.b.id}').memoize(1, m).property('name').order()
[
  'lop',
  'ripple'
]
node > 
node > // ### http://gremlindocs.com/#transform/order
node > // Order the items in the stream according to the closure if provided. If no closure is provided,
node > // then a default sort order is used.
node > g.V().property('name').order()
[
  'josh',
  'lop',
  'marko',
  'peter',
  'ripple',
  'vadas'
]
node > g.V().property('name').order('{it -> it.b <=> it.a}')
[
  'josh',
  'lop',
  'marko',
  'peter',
  'ripple',
  'vadas'
]
node > 
node > // ### http://gremlindocs.com/#transform/ordermap
node > // For every incoming map, sort with supplied closure or T.decr or T.incr and emit keys.
node > // g.V().both().groupCount().cap().order()
node > // g.V().both().groupCount().cap().order().orderMap(T.decr)
node > // g.V().both().groupCount().cap().order().orderMap(T.decr).range(0,1).id().order()
node > // g.V().both().groupCount().cap().order().orderMap(T.decr).range(0,1).property('name').order()
node > 
node > // ### http://gremlindocs.com/#transform/out
node > // Gets the out adjacent vertices to the vertex.
node > g.V('id', '1').outE().inV().id()
[
  '2',
  '3',
  '4'
]
node > g.V('id', '1').out().id()
[
  '2',
  '3',
  '4'
]
node > g.V('id', '1').outE('knows').inV().id()
[
  '2',
  '4'
]
node > g.V('id', '1').out('knows').id()
[
  '2',
  '4'
]
node > //g.V('id', '1').out(1, 'knows').id()
node > 
node > // ### http://gremlindocs.com/#transform/oute
node > // Gets the outgoing edges to the vertex.
node > g.V('id', '1').outE().inV().id()
[
  '2',
  '3',
  '4'
]
node > g.V('id', '1').outE().id()
[
  '7',
  '8',
  '9'
]
node > g.V('id', '1').outE('knows').inV().id()
[
  '2',
  '4'
]
node > g.V('id', '1').outE('knows').id()
[
  '7',
  '8'
]
node > //g.V('id', '1').outE(1, 'knows').id()
node > 
node > // ### http://gremlindocs.com/#transform/outv
node > // Get both outgoing tail vertex of the edge.
node > g.E('id', '12')
[
  {
    _id: '12',
    _inV: '3',
    _label: 'created',
    _outV: '6',
    _type: 'edge',
    weight: 0.2
  }
]
node > g.E('id', '12').outV().id().order()
[
  '6'
]
node > g.E('id', '12').inV().id().order()
[
  '3'
]
node > g.E('id', '12').bothV().id().order()
[
  '3',
  '6'
]
node > 
node > // ### http://gremlindocs.com/#transform/path
node > // Gets the path through the pipeline up to this point, where closures are post-processing for
node > // each object in the path. If the path step is provided closures then, in a round robin fashion,
node > // the closures are evaluated over each object of the path and that post-processed path is returned.
node > g.V('id', '1').out().path()
[
  [
    {
      _id: '1',
      _type: 'vertex',
      age: 29,
      name: 'marko'
    },
    {
      _id: '2',
      _type: 'vertex',
      age: 27,
      name: 'vadas'
    }
  ],
  [
    {
      _id: '1',
      _type: 'vertex',
      age: 29,
      name: 'marko'
    },
    {
      _id: '3',
      _type: 'vertex',
      lang: 'java',
      name: 'lop'
    }
  ],
  [
    {
      _id: '1',
      _type: 'vertex',
      age: 29,
      name: 'marko'
    },
    {
      _id: '4',
      _type: 'vertex',
      age: 32,
      name: 'josh'
    }
  ]
]
node > g.V('id', '1').out().path('{it -> it.id}')
[
  [
    '1',
    '2'
  ],
  [
    '1',
    '3'
  ],
  [
    '1',
    '4'
  ]
]
node > g.V('id', '1').out().path('{it -> it.id}', '{it -> it.name}')
[
  [
    '1',
    'josh'
  ],
  [
    '1',
    'lop'
  ],
  [
    '1',
    'vadas'
  ]
]
node > g.V('id', '1').outE().inV().property('name').path()
[
  [
    'josh',
    {
      _id: '1',
      _type: 'vertex',
      age: 29,
      name: 'marko'
    },
    {
      _id: '4',
      _type: 'vertex',
      age: 32,
      name: 'josh'
    },
    {
      _id: '8',
      _inV: '4',
      _label: 'knows',
      _outV: '1',
      _type: 'edge',
      weight: 1
    }
  ],
  [
    'lop',
    {
      _id: '1',
      _type: 'vertex',
      age: 29,
      name: 'marko'
    },
    {
      _id: '3',
      _type: 'vertex',
      lang: 'java',
      name: 'lop'
    },
    {
      _id: '9',
      _inV: '3',
      _label: 'created',
      _outV: '1',
      _type: 'edge',
      weight: 0.4
    }
  ],
  [
    'vadas',
    {
      _id: '1',
      _type: 'vertex',
      age: 29,
      name: 'marko'
    },
    {
      _id: '2',
      _type: 'vertex',
      age: 27,
      name: 'vadas'
    },
    {
      _id: '7',
      _inV: '2',
      _label: 'knows',
      _outV: '1',
      _type: 'edge',
      weight: 0.5
    }
  ]
]
node > 
node > // ### http://gremlindocs.com/#transform/scatter
node > // Unroll all objects in the iterable at that step. Gather/Scatter is good for breadth-first
node > // traversals where the gather closure filters out unwanted elements at the current radius.
node > g.V('id', '1').out()
[
  {
    _id: '2',
    _type: 'vertex',
    age: 27,
    name: 'vadas'
  },
  {
    _id: '3',
    _type: 'vertex',
    lang: 'java',
    name: 'lop'
  },
  {
    _id: '4',
    _type: 'vertex',
    age: 32,
    name: 'josh'
  }
]
node > g.V('id', '1').out().order('{it -> it.a.id <=> it.b.id}').gather('{it -> it[1..2]}')
[
  [
    {
      _id: '3',
      _type: 'vertex',
      lang: 'java',
      name: 'lop'
    },
    {
      _id: '4',
      _type: 'vertex',
      age: 32,
      name: 'josh'
    }
  ]
]
node > g.V('id', '1').out().order('{it -> it.a.id <=> it.b.id}').gather('{it -> it[1..2]}').scatter()
[
  {
    _id: '3',
    _type: 'vertex',
    lang: 'java',
    name: 'lop'
  },
  {
    _id: '4',
    _type: 'vertex',
    age: 32,
    name: 'josh'
  }
]
node > 
node > // ### http://gremlindocs.com/#transform/select
node > // Select the named steps to emit after select with post-processing closures.
node > g.V('id', '1').as('x').out('knows').as('y').select()
[
  {
    x: {
      _id: '1',
      _type: 'vertex',
      age: 29,
      name: 'marko'
    },
    y: {
      _id: '2',
      _type: 'vertex',
      age: 27,
      name: 'vadas'
    }
  },
  {
    x: {
      _id: '1',
      _type: 'vertex',
      age: 29,
      name: 'marko'
    },
    y: {
      _id: '4',
      _type: 'vertex',
      age: 32,
      name: 'josh'
    }
  }
]
node > var c = new ArrayList()
node > c.addSync('y')
true
node > g.V('id', '1').as('x').out('knows').as('y').select(c)
[
  {
    y: {
      _id: '2',
      _type: 'vertex',
      age: 27,
      name: 'vadas'
    }
  },
  {
    y: {
      _id: '4',
      _type: 'vertex',
      age: 32,
      name: 'josh'
    }
  }
]
node > g.V('id', '1').as('x').out('knows').as('y').select(c, '{it -> it.name}')
[
  {
    y: 'josh'
  },
  {
    y: 'vadas'
  }
]
node > g.V('id', '1').as('x').out('knows').as('y').select('{it -> it.id}', '{it -> it.name}')
[
  {
    x: '1',
    y: 'josh'
  },
  {
    x: '1',
    y: 'vadas'
  }
]
node > 
node > // ### http://gremlindocs.com/#transform/shuffle
node > // Collect all objects up to that step into a list and randomize their order.
node > // g.V('id', '1').out().shuffle()
node > // shuffle() does the right thing, but because it randomizes we can't use it directly
node > // and expect repeatable results. So we sort the results afterwards to get repeatability.
node > g.V('id', '1').out().shuffle().order('{it -> it.a.name <=> it.b.name}')
[
  {
    _id: '2',
    _type: 'vertex',
    age: 27,
    name: 'vadas'
  },
  {
    _id: '3',
    _type: 'vertex',
    lang: 'java',
    name: 'lop'
  },
  {
    _id: '4',
    _type: 'vertex',
    age: 32,
    name: 'josh'
  }
]
node > 
node > // ### http://gremlindocs.com/#transform/transform
node > // Transform emits the result of a closure.
node > g.E().has('weight', T.gt, g.java.newFloat(0.5)).outV().property('age').order()
[
  29,
  32
]
node > g.E().has('weight', T.gt, g.java.newFloat(0.5)).outV().property('age').transform('{it -> it+2}').order()
[
  31,
  34
]
node > g.E().has('weight', T.gt, g.java.newFloat(0.5)).outV().transform('{it -> [it.id, it.age]}')
[
  [
    '1',
    29
  ],
  [
    '4',
    32
  ]
]
node > g.E().has('weight', T.gt, g.java.newFloat(0.5)).outV().transform('{it -> [id:it.id, age:it.age]}')
[
  {
    age: 29,
    id: '1'
  },
  {
    age: 32,
    id: '4'
  }
]
node > 
node > // ### http://gremlindocs.com/#transform/v
node > // The vertex iterator for the graph. Utilize this to iterate through all the vertices in the graph.
node > // Use with care on large graphs unless used in combination with a key index lookup.
node > g.V()
[
  {
    _id: '1',
    _type: 'vertex',
    age: 29,
    name: 'marko'
  },
  {
    _id: '2',
    _type: 'vertex',
    age: 27,
    name: 'vadas'
  },
  {
    _id: '3',
    _type: 'vertex',
    lang: 'java',
    name: 'lop'
  },
  {
    _id: '4',
    _type: 'vertex',
    age: 32,
    name: 'josh'
  },
  {
    _id: '5',
    _type: 'vertex',
    lang: 'java',
    name: 'ripple'
  },
  {
    _id: '6',
    _type: 'vertex',
    age: 35,
    name: 'peter'
  }
]
node > g.V().id()
[
  '1',
  '2',
  '3',
  '4',
  '5',
  '6'
]
node > g.V('name', 'marko')
[
  {
    _id: '1',
    _type: 'vertex',
    age: 29,
    name: 'marko'
  }
]
node > g.V('name', 'marko').property('name')
[
  'marko'
]
